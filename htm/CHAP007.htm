<html><head><title>[FORMAT] 7 Other Applications</title></head>
<body text="#000000" bgcolor="#ffffff">
[<a href = "chapters.htm">Up</a>] [<a href ="CHAP006.htm">Previous</a>] [<a href = "theindex.htm">Index</a>]
<h1>7 Other Applications</h1><p>
<p>
Up to this point our screens, i.e., normal subgroup functions, have yielded local formation residual subgroups, but there is no requirement that they do so. Screens for which the selected normal subgroups can be arbitrary have applications beyond formation theory. Chapter V of <a href="biblio.htm#CH"><cite>CH</cite></a> contains an account of a generalized normalizer theory built from them, and Wright (<a href="biblio.htm#WA"><cite>WA</cite></a> and <a href="biblio.htm#WB"><cite>WB</cite></a>) uses them to construct internal versions of formations that are conceptually related to ordinary formations much as Fitting sets are related to Fitting classes.
<p>
A major application of the generalized normalizers is to speed up computation of complements to normal factors (see&nbsp;<a href="biblio.htm#EW"><cite>EW</cite></a>).
Suppose that <i>G</i> is a finite solvable group with an elementary abelian
normal subgroup <i>A</i> for which there exists a normal subgroup <i>N</i> of <i>G</i>
containing <i>A</i> such that <i>N</i>/<i>A</i> is nilpotent and [<i>N</i>,<i>A</i>] = <i>A</i>. Then <i>A</i> has a complement in <i>G</i>, and all complements
are conjugate---indeed, they can be viewed as generalized
<b>F</b>-normalizers. We will show the idea, which of course is most useful with very large groups, by using <code>FNormalizerWrtFormation</code> to find a complement to an
elementary abelian normal subgroup, in this case to <i>K</i> in <i>S</i><sub>4</sub> with <i>N</i> = <i>A</i><sub>4</sub>. 
<p>
We need to define a formation <code>F</code> in <font face="Gill Sans,Helvetica,Arial">GAP</font> (not a real formation,
of course, just a local version) such that <code>ScreenOfFormation( F )(s4,p)</code> returns <i>A</i><sub>4</sub> for
every call. In order to call <code>FNormalizerWrtFormation</code> we must also set the property
<code>IsIntegrated</code> to <code>true</code>.
<pre>
gap&gt; preform := rec( name := "ForComplement",
&gt; fScreen := function( H, p )
&gt; return Subgroup( H, GeneratorsOfGroup( H ){[2,3,4]});
&gt; end);;
gap&gt; form := Formation(preform);
formation of ForComplement groups 
gap&gt; SetIsIntegrated(form, true);
</pre>
Now we may use  <code>FNormalizerWrtFormation</code>  with <code>s4</code> to
get the complement, an <i>S</i><sub>3</sub>. (Recall that unless <code>form</code> already
thinks it's integrated, <code>FNormalizerWrtFormation</code> will automatically
integrate <code>form</code> before running its computations, which may not be
the desired behavior.)
<pre>
gap&gt; comp := FNormalizerWrtFormation(s4, form); Size(comp);
Group([ f1, f2 ])
6
</pre>
<p>
A user who wanted to employ the <b>F</b>-normalizer technique to compute very
many complements in this way would probably wish to create a new <font face="Gill Sans,Helvetica,Arial">GAP</font>
function by extracting portions of the code that computes
<b>F</b>-systems. 
<p>
<p>
[<a href = "chapters.htm">Up</a>] [<a href ="CHAP006.htm">Previous</a>] [<a href = "theindex.htm">Index</a>]
<P>
<address>FORMAT manual<br>March 2018
</address></body></html>